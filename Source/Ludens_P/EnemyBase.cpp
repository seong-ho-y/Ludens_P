#include "EnemyBase.h"

#include "EnemyAIController.h"
#include "ShooterAIComponent.h"
#include "StealthComponent.h"
#include "TP_WeaponComponent.h"

AEnemyBase::AEnemyBase()
{
	PrimaryActorTick.bCanEverTick = true;
	NetDormancy = DORM_Never;

	
	Combat = CreateDefaultSubobject<UCreatureCombatComponent>(TEXT("CombatComponent"));
	
	bAlwaysRelevant = true;
	bReplicates = true;
	SetReplicatingMovement(true);

	AIControllerClass = AEnemyAIController::StaticClass();
	AutoPossessAI = EAutoPossessAI::PlacedInWorldOrSpawned;
}
void AEnemyBase::BeginPlay()
{
	Super::BeginPlay();
	NetUpdateFrequency = 100.0f; // Í∏∞Î≥∏ÏùÄ 0.1~2.0
	MinNetUpdateFrequency = 50.0f;
	/*UE_LOG(LogTemp, Warning, TEXT("üêõ EnemyBase spawned on: %s | NetRole: %d"), 
		HasAuthority() ? TEXT("Server") : TEXT("Client"),
		static_cast<int32>(GetLocalRole()));*/

	/*UE_LOG(LogTemp, Warning, TEXT("üîç [%s] Replicated: %s | Role: %d | RemoteRole: %d"),
		*GetName(),
		bReplicates ? TEXT("true") : TEXT("false"),
		(int32)GetLocalRole(),
		(int32)GetRemoteRole());*/

	if (!Combat)
	{
		UE_LOG(LogTemp, Error, TEXT("‚ùå Combat is not assigned in %s!"), *GetName());
	}
	
}

void AEnemyBase::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}


void AEnemyBase::SetActive(bool bNewActive)
{
	bActive = bNewActive;

	SetActorHiddenInGame(!bNewActive);
	SetActorEnableCollision(bNewActive);
	SetActorTickEnabled(bNewActive);
	StealthComponent = FindComponentByClass<UStealthComponent>();

	if (Combat) //Ï†ÑÌà¨ Ïª¥Ìè¨ÎÑåÌä∏ ÎπÑÌôúÏÑ±Ìôî
	{
		Combat->SetComponentTickEnabled(bNewActive);
	}
	else
	{
		ensureAlwaysMsgf(false, TEXT("EnemyBase must have CombatComponent initialized!"));
	}

	if (USkeletalMeshComponent* MeshComp = GetMesh())
	{
		MeshComp->SetVisibility(bNewActive, true);
		MeshComp->SetHiddenInGame(!bNewActive, true);
		MeshComp->bPauseAnims = !bNewActive;
		MeshComp->SetComponentTickEnabled(bNewActive);
	}
	else
	{
		UE_LOG(LogTemp, Error, TEXT("‚ùå GetMesh() returned null!"));
	}
	TArray<UActorComponent*> AIComponents;
	GetComponents(UActorComponent::StaticClass(), AIComponents);
	for (UActorComponent* Component : AIComponents)
	{
		// ÏõêÌïòÎäî ÌÉÄÏûÖÎßå Ï≤òÎ¶¨ (WalkerAI, ShooterAI Îì±)
		if (Component->IsA<UWalkerAIComponent>() || Component->IsA<UShooterAIComponent>())
		{
			Component->SetComponentTickEnabled(bNewActive);
		}
	}

	// üîΩ Ïó¨Í∏∞ÏÑú Ïä§ÌÖîÏä§ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
	if (StealthComponent && bActive)
	{
		StealthComponent->ResetStealthState();
	}
	else
	{
		//UE_LOG(LogTemp, Error, TEXT("No StealthComponent"));
	}
}

void AEnemyBase::PostNetInit()
{
	Super::PostNetInit();

	// ÏÑúÎ≤ÑÍ∞Ä ÏßÄÏ†ïÌïú ÎåÄÍ∏∞ ÌõÑ, ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑúÎèÑ ÏïàÏ†ÑÌïòÍ≤å SetActive Í∞ÄÎä•
	if (!HasAuthority())
	{
		FTimerHandle TimerHandle;
		GetWorld()->GetTimerManager().SetTimer(TimerHandle, this, &AEnemyBase::OnPostReplicationInit, 0.1f, false);
	}
}

void AEnemyBase::OnPostReplicationInit()
{
	SetActive(false); // ÏïàÏ†ÑÌïòÍ≤å ÎπÑÌôúÏÑ±Ìôî
}
bool AEnemyBase::IsActive() const
{
	return bActive;
}
void AEnemyBase::MulticastSetActive_Implementation(bool bNewActive)
{
	SetActive(bNewActive);
}
